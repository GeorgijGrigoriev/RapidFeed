name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "stages" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: latest

      - name: Build
        run: go build -v ./...

      - name: Run tests with coverage
        run: go test -v -coverprofile=coverage.out ./...

      - name: Show coverage
        run: go tool cover -func=coverage.out

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out

  htmllint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install go-html-validator
        run: |
          go install github.com/matcornic/go-html-validator/cmd/go-html-validator@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: HTML validation
        run: go-html-validator ./internals/templates/

  csslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install stylelint
        run: npm install stylelint stylelint-config-standard

      - name: Create stylelint configuration
        run: echo '{ "extends": "stylelint-config-standard" }' > .stylelintrc.json

      - name: CSS linting
        run: npx stylelint "./internals/static/*.css"

  security_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Build Docker Image
        run: docker build -t repidfeed:latest .

      - name: Install Trivy
        run: |
     sudo apt-get update -y
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.53.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.53.0_Linux-64bit.deb

      - name: Generate Trivy Report (Before Failing)
        run: |
          trivy image --format json -o trivy-results.json repidfeed:latest
          trivy image --severity HIGH,CRITICAL repidfeed:latest | tee trivy-report.txt

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-report.txt
            trivy-results.json
          retention-days: 7

      - name: Fail if Critical Vulnerability Found
        run: trivy image --exit-code 1 --severity CRITICAL repidfeed:latest
